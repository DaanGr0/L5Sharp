using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using L5Sharp.Components;
using L5Sharp.Core;
using L5Sharp.Enums;
using L5Sharp.Extensions;
using L5Sharp.Repositories;
using L5Sharp.Serialization;
using L5Sharp.Utilities;

namespace L5Sharp;

/// <summary>
/// A simple wrapper around a given <see cref="XElement"/>, which is expected to be the root RSLogix5000Content element
/// of the L5X file. This class implements <see cref="ILogixContent"/> API.
/// </summary>
public class LogixContent : ILogixContent
{
    /// <summary>
    /// 
    /// </summary>
    /// <param name="element"></param>
    /// <exception cref="ArgumentNullException"></exception>
    private LogixContent(XElement element)
    {
        L5X = new L5X(element);
    }

    /// <summary>
    /// Creates a new <see cref="LogixContent"/> by loading the contents of the provide file name.
    /// </summary>
    /// <param name="fileName">The full path, including file name, to the L5X file to load.</param>
    /// <returns>A new <see cref="LogixContent"/> containing the contents of the specified file.</returns>
    /// <exception cref="ArgumentException">The string is null or empty.</exception>
    /// <remarks>
    /// This factory method uses the <see cref="XDocument.Load(string)"/> to load the contents of the xml file into
    /// memory. This means that this method is subject to the same exceptions that could be generated by loading the
    /// XDocument. Once loaded, validation is performed to ensure the content adheres to the specified L5X Schema files.
    /// </remarks>
    public static LogixContent Load(string fileName) => new(XElement.Load(fileName));

    /// <summary>
    /// Creates a new <see cref="LogixContent"/> with the provided L5X string content.
    /// </summary>
    /// <param name="text">The string that contains the L5X content to parse.</param>
    /// <returns>A new <see cref="LogixContent"/> containing the contents of the specified string.</returns>
    /// <exception cref="ArgumentException">The string is null or empty.</exception>
    /// <remarks>
    /// This factory method uses the <see cref="XDocument.Parse(string)"/> to load the contents of the xml file into
    /// memory. This means that this method is subject to the same exceptions that could be generated by parsing the
    /// XDocument. Once parsed, validation is performed to ensure the content adheres to the specified L5X Schema files.
    /// </remarks>
    public static LogixContent Parse(string text) => new(XElement.Parse(text));

    /// <summary>
    /// Creates a new <see cref="LogixContent"/> with the provided logix component as the target type.
    /// </summary>
    /// <param name="target">The L5X target component of the resulting content.</param>
    /// <returns>A <see cref="LogixContent"/> containing the component as the target of the L5X.</returns>
    public static LogixContent Export(ILogixComponent target)
    {
        var content = new XElement(L5XName.RSLogix5000Content);
        content.Add(new XAttribute(L5XName.SchemaRevision, new Revision().ToString()));
        content.Add(new XAttribute(L5XName.TargetName, target.Name));
        content.Add(new XAttribute(L5XName.TargetType, target.GetType().GetLogixName()));
        content.Add(new XAttribute(L5XName.ContainsContext, target.GetType() != typeof(Controller)));
        content.Add(new XAttribute(L5XName.Owner, Environment.UserName));
        content.Add(new XAttribute(L5XName.ExportDate, DateTime.Now.ToString(L5X.DateTimeFormat)));

        var component = LogixSerializer.Serialize(target);
        component.AddFirst(new XAttribute(L5XName.Use, Use.Target));
        content.Add(component);

        return new LogixContent(content);
    }

    /// <summary>
    /// The root L5X content containing all raw XML data for the <see cref="LogixContent"/>.
    /// </summary>
    /// <remarks>
    /// <see cref="L5X"/> inherits from <see cref="XElement"/> and adds some helper properties and methods
    /// for interacting with the root content of the L5X file.
    /// </remarks>
    public L5X L5X { get; }

    /// <inheritdoc />
    public Controller Controller => LogixSerializer.Deserialize<Controller>(L5X.Controller);

    /// <inheritdoc />
    public ILogixComponentRepository<DataType> DataTypes => new ComponentRepository<DataType>(L5X);

    /// <inheritdoc />
    public ILogixComponentRepository<AddOnInstruction> Instructions => new ComponentRepository<AddOnInstruction>(L5X);

    /// <inheritdoc />
    public ILogixComponentRepository<Module> Modules => new ComponentRepository<Module>(L5X);

    /// <inheritdoc />
    public ILogixComponentRepository<Program> Programs => new ComponentRepository<Program>(L5X);

    /// <inheritdoc />
    public ILogixScopedRepository<Routine> Routines => new ScopedRepository<Routine>(L5X);

    /// <inheritdoc />
    public ILogixTagRepository Tags => new TagRepository(L5X);

    /// <inheritdoc />
    public ILogixComponentRepository<LogixTask> Tasks => new ComponentRepository<LogixTask>(L5X);

    /// <inheritdoc />
    public IEnumerable<TEntity> Find<TEntity>() where TEntity : class
    {
        var name = typeof(TEntity).GetLogixName();
        var serializer = LogixSerializer.GetSerializer<TEntity>();
        return L5X.Descendants(name).Select(e => serializer.Deserialize(e));
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="fileName"></param>
    /// <param name="overwrite"></param>
    /// <exception cref="ArgumentException"></exception>
    public void Import(string fileName, bool overwrite = false)
    {
        if (string.IsNullOrEmpty(fileName))
            throw new ArgumentException("FileName can not be null or empty.", nameof(fileName));

        var content = Load(fileName);

        Import(content, overwrite);
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="content"></param>
    /// <param name="overwrite"></param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <exception cref="InvalidOperationException"></exception>
    public void Import(LogixContent content, bool overwrite = false)
    {
        if (content is null)
            throw new ArgumentNullException(nameof(content));

        if (L5X.ContainsContext is true)
            throw new InvalidOperationException("The target L5X not a project file which does not support importing.");

        if (content.L5X.ContainsContext is false)
            throw new InvalidOperationException("The source L5X does not contain context to a specific component.");

        L5X.Merge(content.L5X, overwrite);
    }

    /// <summary>
    /// Serialize this <see cref="LogixContent"/> to a file, overwriting an existing file, if it exists.
    /// </summary>
    /// <param name="fileName">A string that contains the name of the file.</param>
    public void Save(string fileName)
    {
        var declaration = new XDeclaration("1.0", "UTF-8", "yes");
        var document = new XDocument(declaration);
        document.Add(L5X);
        document.Save(fileName);
    }

    /// <inheritdoc />
    public override string ToString() => L5X.ToString();
}