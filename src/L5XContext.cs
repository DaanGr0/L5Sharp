using System;
using System.Linq;
using System.Xml.Linq;
using L5Sharp.Core;
using L5Sharp.Extensions;
using L5Sharp.L5X;
using L5Sharp.Querying;
using L5Sharp.Repositories;
using L5Sharp.Serialization.Components;

namespace L5Sharp
{
    /// <inheritdoc />
    public class L5XContext : ILogixContext
    {
        private readonly L5XDocument _l5X;

        /// <summary>
        /// Creates a new <see cref="L5XContext"/> instance with the provided <see cref="L5XDocument"/>.
        /// </summary>
        /// <param name="l5X">The <see cref="L5XDocument"/> instance that represents the loaded L5X.</param>
        private L5XContext(L5XDocument l5X)
        {
            _l5X = l5X ?? throw new ArgumentNullException(nameof(l5X));
        }

        /// <summary>
        /// Creates a new <see cref="L5XContext"/> by loading the contents of the provide file name.
        /// </summary>
        /// <param name="fileName">The full path, including file name, to the L5X file to load.</param>
        /// <returns>A new <see cref="L5XContext"/> containing the contents of the specified file.</returns>
        /// <exception cref="ArgumentException">The string is null or empty.</exception>
        /// <remarks>
        /// This factory method uses the <see cref="XDocument.Load(string)"/> to load the contents of the xml file into
        /// memory. This means that this method is subject to the same exceptions that could be generated by loading the
        /// XDocument. Once loaded, validation is performed to ensure the content adheres to the specified L5X Schema files.
        /// </remarks>
        public static L5XContext Load(string fileName)
        {
            if (string.IsNullOrEmpty(fileName))
                throw new ArgumentException("Filename can not be null or empty");

            var document = new L5XDocument(XDocument.Load(fileName));

            return new L5XContext(document);
        }

        /// <summary>
        /// Creates a new <see cref="L5XContext"/> with the provided L5X string content.
        /// </summary>
        /// <param name="content">The string that contains the L5X content to parse.</param>
        /// <returns>A new <see cref="L5XContext"/> containing the contents of the specified string.</returns>
        /// <exception cref="ArgumentException">The string is null or empty.</exception>
        /// <remarks>
        /// This factory method uses the <see cref="XDocument.Parse(string)"/> to load the contents of the xml file into
        /// memory. This means that this method is subject to the same exceptions that could be generated by parsing the
        /// XDocument. Once parsed, validation is performed to ensure the content adheres to the specified L5X Schema files.
        /// </remarks>
        public static L5XContext Parse(string content)
        {
            if (string.IsNullOrEmpty(content))
                throw new ArgumentException("Filename can not be null or empty");

            var document = new L5XDocument(XDocument.Parse(content));

            return new L5XContext(document);
        }

        /// <summary>
        /// Creates a new <see cref="L5XContext"/> target for the provided component.
        /// </summary>
        /// <param name="component">The <see cref="ILogixComponent"/> instance for which to create the new context.</param>
        /// <typeparam name="TComponent">The logix component type.</typeparam>
        /// <returns>
        /// A new <see cref="L5XContext"/> instance for the provided logix component as the target of the new context.
        /// </returns>
        public static L5XContext Create<TComponent>(TComponent component)
            where TComponent : ILogixComponent => new(L5XDocument.Create(component));


        /// <summary>
        /// Gets the value of the schema revision for the current L5X context.
        /// </summary>
        public Revision SchemaRevision => _l5X.SchemaRevision;

        /// <summary>
        /// Gets the value of the software revision for the current L5X context.
        /// </summary>
        public Revision SoftwareRevision => _l5X.SoftwareRevision;

        /// <summary>
        /// Gets the name of the Logix component that is the target of the current L5X context.
        /// </summary>
        public ComponentName TargetName => _l5X.TargetName;

        /// <summary>
        /// Gets the type of Logix component that is the target of the current L5X context.
        /// </summary>
        public string TargetType => _l5X.TargetType;

        /// <summary>
        /// Gets the value indicating whether the current L5X is contextual..
        /// </summary>
        public bool ContainsContext => _l5X.ContainsContext;

        /// <summary>
        /// Gets the owner that exported the current L5X file.
        /// </summary>
        public string Owner => _l5X.Owner;

        /// <summary>
        /// Gets the date time that the L5X file was exported.
        /// </summary>
        public DateTime ExportDate => _l5X.ExportDate;

        /// <inheritdoc />
        public IController? Controller() => _l5X.Controller is not null
            ? _l5X.Serializers.Get<ControllerSerializer>().Deserialize(_l5X.Controller)
            : null;

        /// <inheritdoc />
        public IDataTypeRepository DataTypes() => new DataTypeRepository(_l5X);

        /// <inheritdoc />
        public IModuleRepository Modules() => new ModuleRepository(_l5X);

        /// <inheritdoc />
        public IInstructionRepository Instructions() => new InstructionRepository(_l5X);

        /// <inheritdoc />
        public ITagRepository Tags() => new TagRepository(_l5X);

        /// <inheritdoc />
        public ITagRepository Tags(ComponentName program)
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc />
        public IProgramRepository Programs() => new ProgramRepository(_l5X);

        /// <inheritdoc />
        public ITaskQuery Tasks() =>
            new TaskQuery(_l5X.Components.Get<ITask>(), _l5X.Serializers.Get<TaskSerializer>());

        /// <inheritdoc />
        public IRungQuery Rungs()
        {
            var elements = _l5X.Content.Descendants(L5XElement.Rung.ToString());
            return new RungQuery(elements);
        }

        /// <inheritdoc />
        public IRungQuery Rungs(ComponentName program)
        {
            var elements = _l5X.Content
                .Descendants(L5XElement.Program.ToString())
                .FirstOrDefault(e => e.ComponentName() == program)
                ?.Descendants(L5XElement.Rung.ToString()) ?? Enumerable.Empty<XElement>();

            return new RungQuery(elements);
        }

        /// <inheritdoc />
        public override string ToString() => _l5X.Content.ToString();

        /// <summary>
        /// Saves the current content of the <see cref="L5XContext"/> to the specified file,
        /// overwriting an existing file, if it exists.
        /// </summary>
        /// <param name="fileName">The name of the file to save.</param>
        public void Save(string fileName)
        {
            _l5X.Save(fileName);
        }
    }
}