using System;
using System.Linq;
using System.Xml.Linq;
using L5Sharp.Core;
using L5Sharp.L5X;
using L5Sharp.Repositories;

namespace L5Sharp
{
    /// <inheritdoc />
    public class L5XContext : ILogixContext
    {
        /// <summary>
        /// Creates a new <see cref="L5XContext"/> instance with the provided <see cref="L5XDocument"/>.
        /// </summary>
        /// <param name="l5X">The <see cref="L5XDocument"/> instance that represents the loaded L5X.</param>
        private L5XContext(L5XDocument l5X)
        {
            L5X = l5X ?? throw new ArgumentNullException(nameof(l5X));
            Serializer = new L5XSerializers(this);
            Indexer = new L5XIndexers(this);
        }

        /// <summary>
        /// Creates a new <see cref="L5XContext"/> by loading the contents of the provide file name.
        /// </summary>
        /// <param name="fileName">The full path, including file name, to the L5X file to load.</param>
        /// <returns>A new <see cref="L5XContext"/> containing the contents of the specified file.</returns>
        /// <exception cref="ArgumentException">The string is null or empty.</exception>
        /// <remarks>
        /// This factory method uses the <see cref="XDocument.Load(string)"/> to load the contents of the xml file into
        /// memory. This means that this method is subject to the same exceptions that could be generated by loading the
        /// XDocument. Once loaded, validation is performed to ensure the content adheres to the specified L5X Schema files.
        /// </remarks>
        public static L5XContext Load(string fileName)
        {
            if (string.IsNullOrEmpty(fileName))
                throw new ArgumentException("Filename can not be null or empty");

            var document = new L5XDocument(XDocument.Load(fileName));

            return new L5XContext(document);
        }

        /// <summary>
        /// Creates a new <see cref="L5XContext"/> with the provided L5X string content.
        /// </summary>
        /// <param name="content">The string that contains the L5X content to parse.</param>
        /// <returns>A new <see cref="L5XContext"/> containing the contents of the specified string.</returns>
        /// <exception cref="ArgumentException">The string is null or empty.</exception>
        /// <remarks>
        /// This factory method uses the <see cref="XDocument.Parse(string)"/> to load the contents of the xml file into
        /// memory. This means that this method is subject to the same exceptions that could be generated by parsing the
        /// XDocument. Once parsed, validation is performed to ensure the content adheres to the specified L5X Schema files.
        /// </remarks>
        public static L5XContext Parse(string content)
        {
            if (string.IsNullOrEmpty(content))
                throw new ArgumentException("Filename can not be null or empty");

            var document = new L5XDocument(XDocument.Parse(content));

            return new L5XContext(document);
        }

        /// <summary>
        /// Creates a new <see cref="L5XContext"/> target for the provided component.
        /// </summary>
        /// <param name="component">The <see cref="ILogixComponent"/> instance for which to create the new context.</param>
        /// <typeparam name="TComponent">The logix component type.</typeparam>
        /// <returns>
        /// A new <see cref="L5XContext"/> instance for the provided logix component as the target of the new context.
        /// </returns>
        public static L5XContext Create<TComponent>(TComponent component)
            where TComponent : ILogixComponent => new(L5XDocument.Create(component));

        /// <summary>
        /// Gets the underlying <see cref="L5XDocument"/> that the current context represents. 
        /// </summary>
        internal readonly L5XDocument L5X;

        /// <summary>
        /// Gets the <see cref="L5XSerializers"/> instance for the current context containing root component serializer
        /// instances. 
        /// </summary>
        internal readonly L5XSerializers Serializer;

        /// <summary>
        /// An index of all current <see cref="IDataType"/> elements available in the L5X file.
        /// </summary>
        internal readonly L5XIndexers Indexer;

        /// <summary>
        /// Gets the value of the schema revision for the current L5X context.
        /// </summary>
        public Revision SchemaRevision => L5X.SchemaRevision;

        /// <summary>
        /// Gets the value of the software revision for the current L5X context.
        /// </summary>
        public Revision SoftwareRevision => L5X.SoftwareRevision;

        /// <summary>
        /// Gets the name of the Logix component that is the target of the current L5X context.
        /// </summary>
        public ComponentName TargetName => L5X.TargetName;

        /// <summary>
        /// Gets the type of Logix component that is the target of the current L5X context.
        /// </summary>
        public string TargetType => L5X.TargetType;

        /// <summary>
        /// Gets the value indicating whether the current L5X is contextual..
        /// </summary>
        public bool ContainsContext => L5X.ContainsContext;

        /// <summary>
        /// Gets the owner that exported the current L5X file.
        /// </summary>
        public string Owner => L5X.Owner;

        /// <summary>
        /// Gets the date time that the L5X file was exported.
        /// </summary>
        public DateTime ExportDate => L5X.ExportDate;

        /// <inheritdoc />
        public IController? Controller() => L5X.TargetType == nameof(Controller)
            ? Serializer.GetFor<IController>().Deserialize(L5X.GetComponents<IController>().First())
            : null;

        /// <inheritdoc />
        public IRepository<IComplexType> DataTypes() => new DataTypeRepository(this);

        /// <inheritdoc />
        public IModuleRepository Modules() => new ModuleRepository(this);

        /// <inheritdoc />
        public IRepository<IAddOnInstruction> Instructions() => new AddOnInstructionRepository(this);

        /// <inheritdoc />
        public ITagRepository Tags() => new TagRepository(this);

        /// <inheritdoc />
        public ITagRepository Tags(ComponentName program) => new TagRepository(this, program);

        /// <inheritdoc />
        public IRepository<IProgram> Programs() => new ProgramRepository(this);

        /// <inheritdoc />
        public IReadOnlyRepository<ITask> Tasks() => new TaskRepository(this);

        /// <inheritdoc />
        public IRungRepository Rungs()
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc />
        public IRungRepository Rungs(ComponentName program)
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc />
        public override string ToString() => L5X.Content.ToString();

        /// <summary>
        /// Saves the current content of the <see cref="L5XContext"/> to the specified file,
        /// overwriting an existing file, if it exists.
        /// </summary>
        /// <param name="fileName">The name of the file to save.</param>
        public void Save(string fileName)
        {
            L5X.Save(fileName);
        }
    }
}