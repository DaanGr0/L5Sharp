using System;
using System.Linq;
using System.Xml.Linq;
using L5Sharp.Core;
using L5Sharp.Extensions;
using L5Sharp.Querying;
using L5Sharp.Repositories;
using L5Sharp.Serialization;

namespace L5Sharp.L5X
{
    /// <inheritdoc />
    public class L5XContext : ILogixContext
    {
        private readonly L5XDocument _l5X;

        /// <summary>
        /// Creates a new <see cref="L5XContext"/> instance with the provided <see cref="L5XDocument"/>.
        /// </summary>
        /// <param name="l5X">The <see cref="L5XDocument"/> instance that represents the loaded L5X.</param>
        private L5XContext(L5XDocument l5X)
        {
            _l5X = l5X ?? throw new ArgumentNullException(nameof(l5X));
        }

        /// <summary>
        /// Creates a new <see cref="L5XContext"/> by loading the contents of the provide file name.
        /// </summary>
        /// <param name="fileName">The full path, including file name, to the L5X file to load.</param>
        /// <returns>A new <see cref="L5XContext"/> containing the contents of the specified file.</returns>
        /// <exception cref="ArgumentException">The string is null or empty.</exception>
        /// <remarks>
        /// This factory method uses the <see cref="XDocument.Load(string)"/> to load the contents of the xml file into
        /// memory. This means that this method is subject to the same exceptions that could be generated by loading the
        /// XDocument. Once loaded, validation is performed to ensure the content adheres to the specified L5X Schema files.
        /// </remarks>
        public static L5XContext Load(string fileName)
        {
            if (string.IsNullOrEmpty(fileName))
                throw new ArgumentException("Filename can not be null or empty");

            var document = new L5XDocument(XDocument.Load(fileName));

            return new L5XContext(document);
        }

        /// <summary>
        /// Creates a new <see cref="L5XContext"/> with the provided L5X string content.
        /// </summary>
        /// <param name="content">The string that contains the L5X content to parse.</param>
        /// <returns>A new <see cref="L5XContext"/> containing the contents of the specified string.</returns>
        /// <exception cref="ArgumentException">The string is null or empty.</exception>
        /// <remarks>
        /// This factory method uses the <see cref="XDocument.Parse(string)"/> to load the contents of the xml file into
        /// memory. This means that this method is subject to the same exceptions that could be generated by parsing the
        /// XDocument. Once parsed, validation is performed to ensure the content adheres to the specified L5X Schema files.
        /// </remarks>
        public static L5XContext Parse(string content)
        {
            if (string.IsNullOrEmpty(content))
                throw new ArgumentException("Filename can not be null or empty");

            var document = new L5XDocument(XDocument.Parse(content));

            return new L5XContext(document);
        }

        /// <summary>
        /// Creates a new <see cref="L5XContext"/> container with the provided root <see cref="IController"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="L5XContext"/> instance for the provided logix component as the target of the new context.
        /// </returns>
        public static L5XContext Create(IController controller) => new(L5XDocument.Create(controller));

        /// <inheritdoc />
        public bool IsChanged => _l5X.IsChanged;
        
        /// <inheritdoc />
        public IController? Controller() => _l5X.Controller is not null
            ? _l5X.Serializers.Get<ControllerSerializer>().Deserialize(_l5X.Controller)
            : null;

        /// <inheritdoc />
        public IDataTypeRepository DataTypes() => new DataTypeRepository(_l5X);

        /// <inheritdoc />
        public IModuleRepository Modules() => new ModuleRepository(_l5X);

        /// <inheritdoc />
        public IInstructionRepository Instructions() => new InstructionRepository(_l5X);

        /// <inheritdoc />
        public ITagRepository Tags() => new TagRepository(_l5X);

        /// <inheritdoc />
        public ITagRepository Tags(ComponentName program)
        {
            if (program is null)
                throw new ArgumentNullException(nameof(program));

            //todo what should we do here?
            return new TagRepository(_l5X);
        }

        /// <inheritdoc />
        public IProgramRepository Programs() => new ProgramRepository(_l5X);

        /// <inheritdoc />
        public ITaskQuery Tasks() =>
            new TaskQuery(_l5X.Components.Get<ITask>(), _l5X.Serializers.Get<TaskSerializer>());

        /// <inheritdoc />
        public IRungQuery Rungs()
        {
            var elements = _l5X.Content.Descendants(L5XElement.Rung.ToString());
            return new RungQuery(elements);
        }

        /// <inheritdoc />
        public IRungQuery Rungs(ComponentName program)
        {
            var elements = _l5X.Content
                .Descendants(L5XElement.Program.ToString())
                .FirstOrDefault(e => e.ComponentName() == program)
                ?.Descendants(L5XElement.Rung.ToString()) ?? Enumerable.Empty<XElement>();

            return new RungQuery(elements);
        }
        
        /// <inheritdoc />
        public void Save(string fileName) => _l5X.Save(fileName);

        /// <inheritdoc />
        public void AcceptChanges() => _l5X.AcceptChanges();

        /// <inheritdoc />
        public void RejectChanges() => _l5X.RejectChanges();

        /// <inheritdoc />
        public override string ToString() => _l5X.Content.ToString();
    }
}